#labels Featured,Phase-Implementation,Phase-Requirements
= Introduction =

Vesijama is a lightweight wrapper framework for [http://java.sun.com/products/javamail/ Sun's JavaMail] (javax.mail API) for sending emails over smtp. Vesijama stands for Very Simple Java Mail and is designed to be as easy to use as possible, while still being able to do everything you want when sending email.

= Required libraries =

Also see: [http://code.google.com/p/vesijama/source/browse/trunk/NOTICE.txt NOTICE.txt]

Because Vesijama builds on the JavaMail library, it has the same dependencies and adds log4j to it (although the sourcecode could be modified to use Java's built in logging framework).

Vesijama uses a couple of jars that are all opensource. These are the Apache log4j library and Sun JavaMail API library (only the smtp sublibraries). It uses the javax.activation package as well, which is shipped with JavaEE or is available as seperate package.

 * [http://logging.apache.org/log4j/1.2/index.html Log4j] (download [http://vesijama.googlecode.com/files/log4j-1.2.15.jar log4j.jar])
 * [http://java.sun.com/products/javamail/ JavaMail API] (download [http://vesijama.googlecode.com/files/smtp.jar smtp.jar], [http://vesijama.googlecode.com/files/mailapi.jar mailapi.jar])
 * [http://java.sun.com/javase/technologies/desktop/javabeans/jaf/index.jsp Activation framework] (included in jre1.6, or download [http://vesijama.googlecode.com/files/activation.jar activation.jar])

= Example usage =

{{{
final Email email = new Email();

email.setFromAddress("lollypop", "lolly.pop@somemail.com");
email.setSubject("hey");
email.addRecipient("C. Cane", "candycane@candyshop.org", RecipientType.TO);
email.addRecipient("C. Bo", "chocobo@candyshop.org", RecipientType.BCC);
email.setText("We should meet up! ;)");
email.setTextHTML("<img src='cid:wink1'><b>We should meet up!</b><img src='cid:wink2'>");

// embed images and include downloadable attachments
email.addEmbeddedImage("wink1", imageByteArray, "image/png");
email.addEmbeddedImage("wink2", imageDatesource);
email.addAttachment("invitation", pdfByteArray, "application/pdf");
email.addAttachment("dresscode", odfDatasource);

new Mailer("smtp.host.com", 25, "username", "password").sendMail(email);
}}}

You can also pass in your own preconfigured mail Session instance, so this framework is backwards compatible with whatever you use now.

= Alternatives =

There are some alternatives around, such as the [http://static.springframework.org/spring/docs/2.0.x/reference/mail.html Spring mailing framework] or the [http://commons.apache.org/email/userguide.html Apache Commons Mail]. However, Spring works a bit awkward with anonymous subclasses and stuff (and you need Spring in your dependencies), while Apache Commons Mail isn't as simple as it could be.

= Developing Vesijama =

The sourcecode is relatively easy to understand, and well commented. When checking out, you can run a build using `ant compile`, or `ant jar` if you like to create a jar while you're at it. To run the included test class use `ant` or `ant run`, which does the same. Make sure you provide some jvm arguments to indicate which smtp server to use for sending emails.

Example:
{{{ant -Dhost=smtp.someserver.com -Dusername=joe -Dpassword=sixpack}}}